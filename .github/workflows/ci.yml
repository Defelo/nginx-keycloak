name: CI

on:
  - push
  - pull_request

env:
  IMAGE_NAME: defelo/nginx-keycloak

jobs:
  fmt:
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup just
        uses: extractions/setup-just@v1

      - name: Check code formatting with rustfmt
        run: just fmt --check

  check:
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache target directory
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-check-target

      - name: Setup just
        uses: extractions/setup-just@v1

      - name: Check code with clippy
        run: just check

  test:
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Cache target and cargo directories
        uses: actions/cache@v3
        with:
          path: |
            target
            target-tarpaulin
            ~/.cargo/bin
          key: ${{ runner.os }}-test-target

      - name: Install tarpaulin
        run: test -x ~/.cargo/bin/cargo-tarpaulin || cargo install cargo-tarpaulin

      - name: Setup just
        uses: extractions/setup-just@v1

      - name: Run unit tests with coverage
        run: just coverage

  docker_build:
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - "linux/amd64"
#         - "linux/arm/v7"
#         - "linux/arm64/v8"
#         - "linux/s390x"
#         - "linux/ppc64le"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          submodules: recursive
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-${{ matrix.platform }}-

      - name: Create Tag
        id: tag
        run: echo "tag=$(echo ${{ matrix.platform }} | tr / -)" >> $GITHUB_OUTPUT

      - name: Build
        uses: docker/build-push-action@v3.3.0
        with:
          push: false
          load: true
          tags: ${{ steps.tag.outputs.tag }}
          platforms: ${{ matrix.platform }}
          file: Dockerfile
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Build Docker Image Archive
        id: archive
        env:
          TAG: ${{ steps.tag.outputs.tag }}
        run: |
          set -ex

          name=${TAG}.tar.gz
          docker save $TAG | gzip > $name
          echo "name=$name" >> $GITHUB_OUTPUT

      - name: Upload Docker Image Archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.archive.outputs.name }}
          path: ${{ steps.archive.outputs.name }}
          retention-days: 1

  docker_push:
    if: ${{ github.event_name != 'pull_request' && github.actor != 'dependabot[bot]' && github.ref != 'refs/heads/template' }}
    needs: [ fmt, check, test, docker_build ]
    concurrency: docker
    runs-on: ubuntu-latest

    steps:
      - name: Download Docker Image Archive
        uses: actions/download-artifact@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.github_token }}

      - name: Create and Push Tags
        run: |
          set -ex

          name=$IMAGE_NAME

          tag=${GITHUB_REF#refs/tags/v}
          branch=${GITHUB_REF#refs/heads/}

          if [[ $GITHUB_REF = refs/tags/v* ]]; then
            tags="v$tag latest"
          elif [[ $GITHUB_REF = refs/heads/* ]]; then
            tags="$branch"
          fi

          tags="$(echo $tags | tr / -)"
          echo Tags: $tags

          platforms=""
          for file in $(ls */*); do
            echo Loading $file
            platform=$(docker load -qi $file | cut -d' ' -f3)
            platform=${platform%:*}
            platforms="$platforms $platform"
            for tag in $tags; do
              tag=ghcr.io/$name:$tag-$platform
              docker tag $platform $tag
              docker push $tag
            done
          done

          for tag in $tags; do
            cmd="docker manifest create ghcr.io/$name:$tag"
            for platform in $platforms; do
              cmd="$cmd --amend ghcr.io/$name:$tag-$platform"
            done
            $cmd
            docker manifest push ghcr.io/$name:$tag
          done

      - name: Clear
        if: always()
        run: rm -f ${HOME}/.docker/config.json
